on: [push, pull_request]

name: Continuous integration

env:
  # TODO: link with lld (actions/virtual-environments#104)
  RUSTFLAGS: '-g -C target-cpu=native'

# TODO: fix `cargo update` chicken-and-egg problem with regards to ~/.cargo and Cargo.lock
#       (maybe cache the Cargo.lock only for this CI run? And/Or relax the ~/.cargo cache key,
#        so it works across CI runs?)
# TODO: cache rustup artifacts (actions-rs/meta#21)
# TODO: add cargo bench command with cached benchmark results? consider runtime (GitHub free limits)!
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - run: cat /proc/cpuinfo
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      # START CACHING
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index
      - name: Run cargo update # generates Cargo.lock
        uses: actions-rs/cargo@v1
        with:
          command: update
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      # END CACHING
      - name: Run cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build

  check:
    name: Check
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      # START CACHING
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index
      - name: Run cargo update # generates Cargo.lock
        uses: actions-rs/cargo@v1
        with:
          command: update
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      # END CACHING
      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --verbose

  test:
    name: Test Suite
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      # START CACHING

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index
      - name: Run cargo update # generates Cargo.lock
        uses: actions-rs/cargo@v1
        with:
          command: update
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      # END CACHING
      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose

  fmt:
    name: Rustfmt
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      # Note: doesn't seem to need caching
      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add clippy
      # START CACHING
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index
      - name: Run cargo update # generates Cargo.lock
        uses: actions-rs/cargo@v1
        with:
          command: update
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      # END CACHING
      - name: Run Clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings
